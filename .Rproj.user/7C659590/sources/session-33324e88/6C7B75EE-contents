# ```{r setup, include=FALSE, eval=FALSE}
# knitr::opts_chunk$set(echo = FALSE, message=FALSE, cache=TRUE)
# 
# where $\beta = `r sprintf("%.2f", adbudget)`$
# ```

library(fpp3)
library(tidyverse)
library(dplyr)

sp <- read.csv("SP500.csv")
sp <- sp |> filter(SP500 != ".") |>
  mutate(trading_day = row_number(), SP500 = as.numeric(SP500)) |> 
  as_tsibble(index=trading_day, regular=TRUE)
T <- nrow(sp)
train <- sp |> filter(trading_day <= floor(nrow(sp)*.6)) |> mutate(log = log(SP500))
R <- nrow(train)
test <- sp |> filter(trading_day > floor(nrow(sp)*.6)) |> mutate(log = log(SP500))
P <- nrow(test)

fit_1 <- train |> model(ARIMA(log(SP500)))
fit_1_coef <- coef(fit_1) |> select(term, estimate)
resid_1 <- numeric(P+1) |> as.numeric()
resid_1[1] <- residuals(fit_1) |> as_tibble() |> select(.resid) |> tail(1)
resid_1[2] <- test[1,4] - (fit_1_coef[3,2] + (1+fit_1_coef[1,2])*train[R,4] - fit_1_coef[1,2]*train[R-1,4] + fit_1_coef[2,2]*resid_1[1])
resid_1[3] <- test[2,4] - (fit_1_coef[3,2] + (1+fit_1_coef[1,2])*test[1,4] - fit_1_coef[1,2]*train[R,4] + fit_1_coef[2,2]*resid_1[2])
for (j in 4:(P+1)) {
  resid_1[j] <- test[j-1,4] - (fit_1_coef[3,2] + (1+fit_1_coef[1,2])*test[j-2,4] - fit_1_coef[1,2]*test[j-3,4] + fit_1_coef[2,2]*resid_1[j-1])
}
mean_1 <- numeric(P) |> as.numeric()
mean_1[1] <- fit_1_coef[3,2] + (1+fit_1_coef[1,2])*train[R,4] - fit_1_coef[1,2]*train[R-1,4] + fit_1_coef[2,2]*resid_1[1]
mean_1[2] <- fit_1_coef[3,2] + (1+fit_1_coef[1,2])*test[1,4] - fit_1_coef[1,2]*train[R,4] + fit_1_coef[2,2]*resid_1[2]
for (j in 3:P) {
  mean_1[j] <- fit_1_coef[3,2] + (1+fit_1_coef[1,2])*test[j-1,4] - fit_1_coef[1,2]*test[j-2,4] + fit_1_coef[2,2]*resid_1[j]
}
var_1 <- glance(fit_1) |> select(sigma2)
sd_1 <- sqrt(var_1) |> as.numeric()
pd_1 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  pd_1[j] <- dlnorm(test[[j,2]], mean_1[[j]], sd_1[[1]])
}
LS_1 <- sum(log(pd_1))
LS_1


fit_2 <- train |> model(ETS(SP500))
fit_2_coef <- coef(fit_2) |> select(term, estimate)
resid_2 <- residuals(fit_2) |> as_tibble() |> select(.resid)
level <- numeric(T+1) |> as.numeric()
level[1] <- fit_2_coef[2,2]
for (j in 1:R) {
  level[j+1] <- level[j]*(1 + fit_2_coef[1,2]*resid_2[j,1])
}
resid_2_new <- numeric(P) |> as.numeric()
for(i in 1:P) {
  resid_2_new[i] <- (test[i,2] - level[R+i]) / level[R+i]
  level[R+i+1] <- level[R+i]*(1 + fit_2_coef[1,2]*resid_2_new[i])
}
mean_2 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  mean_2[j] <- level[[R+j]]
}
mean_2 <- as_tibble(mean_2)
var_2 <- glance(fit_2) |> select(sigma2) |> as.numeric()
var_2 <- mean_2^2*var_2
sd_2 <- sqrt(var_2)
pd_2 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  pd_2[j] <- dnorm(test[[j,2]], mean_2[[j,1]], sd_2[[j,1]])
}
LS_2 <- sum(log(pd_2))
LS_2


fit_3 <- train |> model(ETS(SP500 ~ error("M") + trend("A") + season("N")))
fit_3_coef <- coef(fit_3) |> select(term, estimate)
resid_3 <- residuals(fit_3) |> as_tibble() |> select(.resid)
level <- numeric(T+1) |> as.numeric()
level[1] <- fit_3_coef[3,2] # l_0
trend <- numeric(T+1) |> as.numeric()
trend[1] <- fit_3_coef[4,2] # b_0
for (j in 1:R) {
  level[j+1] <- (level[[j]] + trend[[j]])*(1 + fit_3_coef[1,2]*resid_3[j,1])
  trend[j+1] <- trend[[j]] + fit_3_coef[1,2]*fit_3_coef[2,2]*(level[[j]] + trend[[j]])*resid_3[j,1]
}
resid_3_new <- numeric(P) |> as.numeric()
for(i in 1:P) {
  resid_3_new[i] <- (test[i,2] - (level[[R+i]] + trend[[R+i]])) / ((level[[R+i]] + trend[[R+i]]))
  level[R+i+1] <- (level[[R+i]] + trend[[R+i]])*(1 + fit_3_coef[1,2]*resid_3_new[i])
  trend[R+i+1] <- trend[[R+i]] + fit_3_coef[1,2]*fit_3_coef[2,2]*(level[[R+i]] + trend[[R+i]])*resid_3_new[i]  
}
mean_3 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  mean_3[j] <- level[[R+j]] + trend[[R+j]]
}
mean_3 <- as_tibble(mean_3)
var_3 <- glance(fit_3) |> select(sigma2) |> as.numeric()
var_3 <- mean_3^2*var_3
sd_3 <- sqrt(var_3)
pd_3 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  pd_3[j] <- dnorm(test[[j,2]], mean_3[[j,1]], sd_3[[j,1]])
}
LS_3 <- sum(log(pd_3))
LS_3


fit_4 <- train |> model(ARIMA(SP500 ~ trend()))
fit_4_coef <- coef(fit_4) |> select(term, estimate)
mean_4 <- numeric(P) |> as.numeric()
mean_4[1] <- (fit_4_coef[3,2] - fit_4_coef[1,2]*fit_4_coef[3,2] + fit_4_coef[1,2]*fit_4_coef[2,2] + fit_4_coef[1,2]*train[R,2] + (fit_4_coef[2,2] - fit_4_coef[1,2]*fit_4_coef[2,2])*(R+1))
for (j in 2:P) {
  mean_4[j] <- (fit_4_coef[3,2] - fit_4_coef[1,2]*fit_4_coef[3,2] + fit_4_coef[1,2]*fit_4_coef[2,2] + fit_4_coef[1,2]*test[j-1,2] + (fit_4_coef[2,2] - fit_4_coef[1,2]*fit_4_coef[2,2])*(R+j))
}
var_4 <- glance(fit_4) |> select(sigma2)
sd_4 <- sqrt(var_4) |> as.numeric()
pd_4 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  pd_4[j] <- dnorm(test[[j,2]], mean_4[[j]], sd_4[[1]])
}
LS_4 <- sum(log(pd_4))
LS_4


fit_5 <- train |> model(ARIMA(log(SP500) ~ trend()))
fit_5_coef <- coef(fit_5) |> select(term, estimate)
mean_5 <- numeric(P) |> as.numeric()
mean_5[1] <- (fit_5_coef[3,2] - fit_5_coef[1,2]*fit_5_coef[3,2] + fit_5_coef[1,2]*fit_5_coef[2,2] + fit_5_coef[1,2]*train[R,4] + (fit_5_coef[2,2] - fit_5_coef[1,2]*fit_5_coef[2,2])*(R+1))
for (j in 2:P) {
  mean_5[j] <- (fit_5_coef[3,2] - fit_5_coef[1,2]*fit_5_coef[3,2] + fit_5_coef[1,2]*fit_5_coef[2,2] + fit_5_coef[1,2]*test[j-1,4] + (fit_5_coef[2,2] - fit_5_coef[1,2]*fit_5_coef[2,2])*(R+j))
}
var_5 <- glance(fit_5) |> select(sigma2)
sd_5 <- sqrt(var_5) |> as.numeric()
pd_5 <- numeric(P) |> as.numeric()
for (j in 1:P) {
  pd_5[j] <- dlnorm(test[[j,2]], mean_5[[j]], sd_5[[1]])
}
LS_5 <- sum(log(pd_5))
LS_5





w <- seq(from = 0, to = 1, by = 0.01)
pool <- numeric(length(w)) |> as.numeric()
weight <- numeric(4+3+2+1) |> as.numeric()
LS_comb <- numeric(4+3+2+1) |> as.numeric()
# LS_comb <- matrix(0, nrow = 5, ncol = 5)
# LS_comb[1,1] <- LS_1
# LS_comb[2,2] <- LS_2
# LS_comb[3,3] <- LS_3
# LS_comb[4,4] <- LS_4
# LS_comb[5,5] <- LS_5


for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_2))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[1] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[1] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,2] <- LS
# LS_comb[2,1] <- LS

p1 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ARIMA(1,1,1) and ETS(M,N,N)",
       x = "Weight on model ARIMA(1,1,1)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[1], y = LS_comb[1], 
           label = paste0("Max: ", round(LS_comb[1],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[1], y = LS_comb[1], 
           label = paste0("Weight: ", round(weight[1],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[1], y = LS_comb[1]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_3))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[2] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[2] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,3] <- LS
# LS_comb[3,1] <- LS

p2 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ARIMA(1,1,1) and ETS(M,A,N)",
       x = "Weight on model ARIMA(1,1,1)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[2], y = LS_comb[2], 
           label = paste0("Max: ", round(LS_comb[2],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[2], y = LS_comb[2], 
           label = paste0("Weight: ", round(weight[2],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[2], y = LS_comb[2]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_4))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[3] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[3] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,4] <- LS
# LS_comb[4,1] <- LS

p3 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ARIMA(1,1,1) and LM (linear)",
       x = "Weight on model ARIMA(1,1,1)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[3], y = LS_comb[3], 
           label = paste0("Max: ", round(LS_comb[3],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[3], y = LS_comb[3], 
           label = paste0("Weight: ", round(weight[3],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[3], y = LS_comb[3]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_5))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[4] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[4] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,5] <- LS
# LS_comb[5,1] <- LS

p4 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ARIMA(1,1,1) and LM (log)",
       x = "Weight on model ARIMA(1,1,1)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[4], y = LS_comb[4], 
           label = paste0("Max: ", round(LS_comb[4],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[4], y = LS_comb[4], 
           label = paste0("Weight: ", round(weight[4],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[4], y = LS_comb[4]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_2 + (1-w[j])*pd_3))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[5] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[5] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[2,3] <- LS
# LS_comb[3,2] <- LS

p5 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ETS(M,N,N) and ETS(M,A,N)",
       x = "Weight on model ETS(M,N,N)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[5], y = LS_comb[5], 
           label = paste0("Max: ", round(LS_comb[5],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[5], y = LS_comb[5], 
           label = paste0("Weight: ", round(weight[5],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[5], y = LS_comb[5]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_2 + (1-w[j])*pd_4))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[6] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[6] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[2,4] <- LS
# LS_comb[4,2] <- LS

p6 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ETS(M,N,N) and LM (linear)",
       x = "Weight on model ETS(M,N,N)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[6], y = LS_comb[6], 
           label = paste0("Max: ", round(LS_comb[6],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[6], y = LS_comb[6], 
           label = paste0("Weight: ", round(weight[6],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[6], y = LS_comb[6]), size = 3, color = "orange")



for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_2 + (1-w[j])*pd_5))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[7] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[7] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[2,5] <- LS
# LS_comb[5,2] <- LS

p7 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ETS(M,N,N) and LM (log)",
       x = "Weight on model ETS(M,N,N)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[7], y = LS_comb[7], 
           label = paste0("Max: ", round(LS_comb[7],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[7], y = LS_comb[7], 
           label = paste0("Weight: ", round(weight[7],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[7], y = LS_comb[7]), size = 3, color = "orange")





for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_3 + (1-w[j])*pd_4))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[8] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[8] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[3,4] <- LS
# LS_comb[4,3] <- LS

p8 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ETS(M,A,N) and LM (linear)",
       x = "Weight on model ETS(M,A,N)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[8], y = LS_comb[8], 
           label = paste0("Max: ", round(LS_comb[8],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[8], y = LS_comb[8], 
           label = paste0("Weight: ", round(weight[8],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[8], y = LS_comb[8]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_3 + (1-w[j])*pd_5))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[9] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[9] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[3,5] <- LS
# LS_comb[5,3] <- LS

p9 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "ETS(M,A,N) and LM (log)",
       x = "Weight on model ETS(M,A,N)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[9], y = LS_comb[9], 
           label = paste0("Max: ", round(LS_comb[9],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[9], y = LS_comb[9], 
           label = paste0("Weight: ", round(weight[9],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[9], y = LS_comb[9]), size = 3, color = "orange")




for (j in 1:length(w)) {
  pool[j] <-  sum(log(w[j]*pd_4 + (1-w[j])*pd_5))
}

comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[10] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[10] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[4,5] <- LS
# LS_comb[5,4] <- LS

p10 <- comb |> ggplot(aes(w, pool)) +
  geom_line(color = "red") +
  labs(title = "LM (linear) and LM (log)",
       x = "Weight on model LM (linear)",
       y = "Log predictive socre") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        title = element_text(size = 9),
        axis.text = element_text(size = 6)) +
  annotate("text", x = weight[10], y = LS_comb[10], 
           label = paste0("Max: ", round(LS_comb[10],4)), vjust = 2, size = 3) +
  annotate("text", x = weight[10], y = LS_comb[10], 
           label = paste0("Weight: ", round(weight[10],4)), vjust = 4, size = 3) +
  geom_point(aes(x = weight[10], y = LS_comb[10]), size = 3, color = "orange")





Name <- c(12,13,14,15,23,24,25,34,35,45)
options(decimals=8)
set <- cbind(Name, weight, LS_comb) |> as_tibble()
set |> arrange(-LS_comb) |> head(4)



p1 <- p1 + scale_y_continuous(limits = c(-5.872, -5.79))
p2 <- p2 + scale_y_continuous(limits = c(-5.872, -5.79))
p7 <- p7 + scale_y_continuous(limits = c(-5.872, -5.79))
p9 <- p9 + scale_y_continuous(limits = c(-5.872, -5.79))


library(gridExtra)
grid.arrange(p1,p2,p7,p9,ncol = 2)

pdf("best4.pdf", width = 7, height = 5)
grid.arrange(p1,p2,p7,p9,ncol = 2)
dev.off()









