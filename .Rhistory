LS_3_train
level[R+1] <- (level[[R]] + trend[[R]])*(1 + fit_3_coef[1,2]*resid_3_train[R,1])
trend[R+1] <- trend[[R]] + fit_3_coef[1,2]*fit_3_coef[2,2]*(level[[R]] + trend[[R]])*resid_3_train[R,1]
resid_3 <- numeric(P) |> as.numeric()
for(i in 1:P) {
resid_3[i] <- (test[i,2] - (level[[R+i]] + trend[[R+i]])) / ((level[[R+i]] + trend[[R+i]]))
level[R+i+1] <- (level[[R+i]] + trend[[R+i]])*(1 + fit_3_coef[1,2]*resid_3[i])
trend[R+i+1] <- trend[[R+i]] + fit_3_coef[1,2]*fit_3_coef[2,2]*(level[[R+i]] + trend[[R+i]])*resid_3[i]
}
mean_3 <- numeric(P) |> as.numeric()
for (j in 1:P) {
mean_3[j] <- level[[R+j]] + trend[[R+j]]
}
mean_3 <- as_tibble(mean_3)
var_3 <- glance(fit_3) |> select(sigma2) |> as.numeric()
var_3 <- mean_3^2*var_3
sd_3 <- sqrt(var_3)
pd_3 <- numeric(P) |> as.numeric()
for (j in 1:P) {
pd_3[j] <- dnorm(test[[j,2]], mean_3[[j,1]], sd_3[[j,1]])
}
LS_3 <- sum(log(pd_3))
LS_3
var_4_train <- glance(fit_4) |> select(sigma2)
sd_4_train <- sqrt(var_4_train) |> as.numeric()
fit_4 <- train |> model(ARIMA(SP500 ~ trend()))
fit_4_coef <- coef(fit_4) |> select(term, estimate)
# y_2 - y_t
mean_4_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
mean_4_train[j] <- (fit_4_coef[3,2] - fit_4_coef[1,2]*fit_4_coef[3,2] + fit_4_coef[1,2]*fit_4_coef[2,2] + fit_4_coef[1,2]*test[j,2] + (fit_4_coef[2,2] - fit_4_coef[1,2]*fit_4_coef[2,2])*(j+1))
}
head(mean_4_train)
tail(mean_4_train)
mean_4_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
mean_4_train[j] <- (fit_4_coef[3,2] - fit_4_coef[1,2]*fit_4_coef[3,2] + fit_4_coef[1,2]*fit_4_coef[2,2] + fit_4_coef[1,2]*train[j,2] + (fit_4_coef[2,2] - fit_4_coef[1,2]*fit_4_coef[2,2])*(j+1))
}
head(mean_4_train)
tail(mean_4_train)
var_4_train <- glance(fit_4) |> select(sigma2)
sd_4_train <- sqrt(var_4_train) |> as.numeric()
pd_4_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
pd_4_train[j] <- dnorm(train[[j,2]], mean_4_train[[j]], sd_4_train[[1]])
}
LS_4_train <- sum(log(pd_4_train))
LS_4_train
mean_4 <- numeric(P) |> as.numeric()
mean_4[1] <- (fit_4_coef[3,2] - fit_4_coef[1,2]*fit_4_coef[3,2] + fit_4_coef[1,2]*fit_4_coef[2,2] + fit_4_coef[1,2]*train[R,2] + (fit_4_coef[2,2] - fit_4_coef[1,2]*fit_4_coef[2,2])*(R+1))
for (j in 2:P) {
mean_4[j] <- (fit_4_coef[3,2] - fit_4_coef[1,2]*fit_4_coef[3,2] + fit_4_coef[1,2]*fit_4_coef[2,2] + fit_4_coef[1,2]*test[j-1,2] + (fit_4_coef[2,2] - fit_4_coef[1,2]*fit_4_coef[2,2])*(R+j))
}
var_4 <- glance(fit_4) |> select(sigma2)
sd_4 <- sqrt(var_4) |> as.numeric()
pd_4 <- numeric(P) |> as.numeric()
for (j in 1:P) {
pd_4[j] <- dnorm(test[[j,2]], mean_4[[j]], sd_4[[1]])
}
LS_4 <- sum(log(pd_4))
LS_4
fit_5 <- train |> model(ARIMA(log(SP500) ~ trend()))
fit_5_coef <- coef(fit_5) |> select(term, estimate)
# log(y)_2 - log(y)_t
mean_5_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
mean_5_train[j] <- (fit_5_coef[3,2] - fit_5_coef[1,2]*fit_5_coef[3,2] + fit_5_coef[1,2]*fit_5_coef[2,2] + fit_5_coef[1,2]*train[j,4] + (fit_5_coef[2,2] - fit_5_coef[1,2]*fit_5_coef[2,2])*(j+1))
}
var_5_train <- glance(fit_5) |> select(sigma2)
sd_5_train <- sqrt(var_5_train) |> as.numeric()
var_5_train <- glance(fit_5) |> select(sigma2)
sd_5_train <- sqrt(var_5_train) |> as.numeric()
pd_5_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
pd_5[j] <- dlnorm(train[[j,2]], mean_5[[j]], sd_5[[1]])
}
for (j in 1:(R-1)) {
pd_5[j] <- dlnorm(train[[j,2]], mean_5_train[[j]], sd_5_train[[1]])
}
fit_5 <- train |> model(ARIMA(log(SP500) ~ trend()))
fit_5_coef <- coef(fit_5) |> select(term, estimate)
# log(y)_2 - log(y)_t
mean_5_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
mean_5_train[j] <- (fit_5_coef[3,2] - fit_5_coef[1,2]*fit_5_coef[3,2] + fit_5_coef[1,2]*fit_5_coef[2,2] + fit_5_coef[1,2]*train[j,4] + (fit_5_coef[2,2] - fit_5_coef[1,2]*fit_5_coef[2,2])*(j+1))
}
var_5_train <- glance(fit_5) |> select(sigma2)
sd_5_train <- sqrt(var_5_train) |> as.numeric()
pd_5_train <- numeric(R-1) |> as.numeric()
for (j in 1:(R-1)) {
pd_5_train[j] <- dlnorm(train[[j,2]], mean_5_train[[j]], sd_5_train[[1]])
}
LS_5_train <- sum(log(pd_5_train))
LS_5_train
mean_5 <- numeric(P) |> as.numeric()
mean_5[1] <- (fit_5_coef[3,2] - fit_5_coef[1,2]*fit_5_coef[3,2] + fit_5_coef[1,2]*fit_5_coef[2,2] + fit_5_coef[1,2]*train[R,4] + (fit_5_coef[2,2] - fit_5_coef[1,2]*fit_5_coef[2,2])*(R+1))
for (j in 2:P) {
mean_5[j] <- (fit_5_coef[3,2] - fit_5_coef[1,2]*fit_5_coef[3,2] + fit_5_coef[1,2]*fit_5_coef[2,2] + fit_5_coef[1,2]*test[j-1,4] + (fit_5_coef[2,2] - fit_5_coef[1,2]*fit_5_coef[2,2])*(R+j))
}
var_5 <- glance(fit_5) |> select(sigma2)
sd_5 <- sqrt(var_5) |> as.numeric()
pd_5 <- numeric(P) |> as.numeric()
for (j in 1:P) {
pd_5[j] <- dlnorm(test[[j,2]], mean_5[[j]], sd_5[[1]])
}
LS_5 <- sum(log(pd_5))
LS_5
w <- seq(from = 0, to = 1, by = 0.01)
pool_train <- numeric(length(w)) |> as.numeric()
weight_train <- numeric(4+3+2+1) |> as.numeric()
LS_comb_train <- numeric(4+3+2+1) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_2_train))
}
comb_1 <- cbind(w,pool_train) |> as_tibble()
comb_1 |> filter(pool_train == max(comb_1$pool_train))
weight_train[1] <- comb_1 |> filter(pool_train == max(comb_1$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb_1 |> filter(pool_train == max(comb_1$pool_train)) |> select(pool_train) |> as.numeric()
pd_1_train
pd_1
pool <- numeric(length(w)) |> as.numeric()
weight <- numeric(4+3+2+1) |> as.numeric()
LS_comb <- numeric(4+3+2+1) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_2))
}
pool
pool_train
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_2_train))
}
warnings()
w[1]
w[5]
length(w)
w[1]*pd_1_train
pd_2_train[1511]
pd_2_train[2:1511]
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_2_train[2:1511]))
}
comb_1 <- cbind(w,pool_train) |> as_tibble()
comb_1 |> filter(pool_train == max(comb_1$pool_train))
weight_train[1] <- comb_1 |> filter(pool_train == max(comb_1$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb_1 |> filter(pool_train == max(comb_1$pool_train)) |> select(pool_train) |> as.numeric()
comb |> ggplot(aes(w, pool_train)) +
geom_line(color = "red") +
labs(title = "ARIMA(1,1,1) and ETS(M,N,N)",
x = "Weight on model ARIMA(1,1,1)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight_train[1], y = LS_comb_train[1],
label = paste0("Max: ", round(LS_comb[1],4)), vjust = 2, size = 3) +
annotate("text", x = weight_train[1], y = LS_comb_train[1],
label = paste0("Weight: ", round(weight_train[1],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight_train[1], y = LS_comb_train[1]), size = 3, color = "orange")
comb_1 |> ggplot(aes(w, pool_train)) +
geom_line(color = "red") +
labs(title = "ARIMA(1,1,1) and ETS(M,N,N)",
x = "Weight on model ARIMA(1,1,1)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight_train[1], y = LS_comb_train[1],
label = paste0("Max: ", round(LS_comb[1],4)), vjust = 2, size = 3) +
annotate("text", x = weight_train[1], y = LS_comb_train[1],
label = paste0("Weight: ", round(weight_train[1],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight_train[1], y = LS_comb_train[1]), size = 3, color = "orange")
View(comb_1)
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_3_train[2:1511]))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_4_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_5_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_2_train + (1-w[j])*pd_3_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_2_train[2:1511] + (1-w[j])*pd_4_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_2_train[2:1511] + (1-w[j])*pd_5_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_3_train[2:1511] + (1-w[j])*pd_4_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[1] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
weight_train
LS_comb_train
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_3_train[2:1511]))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[2] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[2] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_4_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[3] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[3] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_1_train + (1-w[j])*pd_5_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[4] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[4] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_2_train + (1-w[j])*pd_3_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[5] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[5] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_2_train[2:1511] + (1-w[j])*pd_4_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[6] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[6] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_2_train[2:1511] + (1-w[j])*pd_5_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[7] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[7] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_3_train[2:1511] + (1-w[j])*pd_4_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[8] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[8] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_3_train[2:1511] + (1-w[j])*pd_5_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[9] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[9] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(log(w[j]*pd_4_train + (1-w[j])*pd_5_train))
}
comb <- cbind(w,pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_train[10] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_train[10] <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
weight_train
LS_comb_train
pool <- numeric(length(w)) |> as.numeric()
weight <- numeric(4+3+2+1) |> as.numeric()
LS_comb <- numeric(4+3+2+1) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_2))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[1] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[1] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_3))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[2] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[2] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,3] <- LS
# LS_comb[3,1] <- LS
p2 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ARIMA(1,1,1) and ETS(M,A,N)",
x = "Weight on model ARIMA(1,1,1)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[2], y = LS_comb[2],
label = paste0("Max: ", round(LS_comb[2],4)), vjust = 2, size = 3) +
annotate("text", x = weight[2], y = LS_comb[2],
label = paste0("Weight: ", round(weight[2],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[2], y = LS_comb[2]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_4))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[3] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[3] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,4] <- LS
# LS_comb[4,1] <- LS
p3 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ARIMA(1,1,1) and LM (linear)",
x = "Weight on model ARIMA(1,1,1)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[3], y = LS_comb[3],
label = paste0("Max: ", round(LS_comb[3],4)), vjust = 2, size = 3) +
annotate("text", x = weight[3], y = LS_comb[3],
label = paste0("Weight: ", round(weight[3],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[3], y = LS_comb[3]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_1 + (1-w[j])*pd_5))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[4] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[4] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[1,5] <- LS
# LS_comb[5,1] <- LS
p4 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ARIMA(1,1,1) and LM (log)",
x = "Weight on model ARIMA(1,1,1)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[4], y = LS_comb[4],
label = paste0("Max: ", round(LS_comb[4],4)), vjust = 2, size = 3) +
annotate("text", x = weight[4], y = LS_comb[4],
label = paste0("Weight: ", round(weight[4],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[4], y = LS_comb[4]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_2 + (1-w[j])*pd_3))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[5] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[5] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[2,3] <- LS
# LS_comb[3,2] <- LS
p5 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ETS(M,N,N) and ETS(M,A,N)",
x = "Weight on model ETS(M,N,N)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[5], y = LS_comb[5],
label = paste0("Max: ", round(LS_comb[5],4)), vjust = 2, size = 3) +
annotate("text", x = weight[5], y = LS_comb[5],
label = paste0("Weight: ", round(weight[5],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[5], y = LS_comb[5]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_2 + (1-w[j])*pd_4))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[6] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[6] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[2,4] <- LS
# LS_comb[4,2] <- LS
p6 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ETS(M,N,N) and LM (linear)",
x = "Weight on model ETS(M,N,N)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[6], y = LS_comb[6],
label = paste0("Max: ", round(LS_comb[6],4)), vjust = 2, size = 3) +
annotate("text", x = weight[6], y = LS_comb[6],
label = paste0("Weight: ", round(weight[6],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[6], y = LS_comb[6]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_2 + (1-w[j])*pd_5))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[7] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[7] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[2,5] <- LS
# LS_comb[5,2] <- LS
p7 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ETS(M,N,N) and LM (log)",
x = "Weight on model ETS(M,N,N)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[7], y = LS_comb[7],
label = paste0("Max: ", round(LS_comb[7],4)), vjust = 2, size = 3) +
annotate("text", x = weight[7], y = LS_comb[7],
label = paste0("Weight: ", round(weight[7],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[7], y = LS_comb[7]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_3 + (1-w[j])*pd_4))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[8] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[8] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[3,4] <- LS
# LS_comb[4,3] <- LS
p8 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ETS(M,A,N) and LM (linear)",
x = "Weight on model ETS(M,A,N)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[8], y = LS_comb[8],
label = paste0("Max: ", round(LS_comb[8],4)), vjust = 2, size = 3) +
annotate("text", x = weight[8], y = LS_comb[8],
label = paste0("Weight: ", round(weight[8],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[8], y = LS_comb[8]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_3 + (1-w[j])*pd_5))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[9] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[9] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[3,5] <- LS
# LS_comb[5,3] <- LS
p9 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ETS(M,A,N) and LM (log)",
x = "Weight on model ETS(M,A,N)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[9], y = LS_comb[9],
label = paste0("Max: ", round(LS_comb[9],4)), vjust = 2, size = 3) +
annotate("text", x = weight[9], y = LS_comb[9],
label = paste0("Weight: ", round(weight[9],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[9], y = LS_comb[9]), size = 3, color = "orange")
for (j in 1:length(w)) {
pool[j] <-  sum(log(w[j]*pd_4 + (1-w[j])*pd_5))
}
comb <- cbind(w,pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight[10] <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb[10] <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
# LS_comb[4,5] <- LS
# LS_comb[5,4] <- LS
p10 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "LM (linear) and LM (log)",
x = "Weight on model LM (linear)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight[10], y = LS_comb[10],
label = paste0("Max: ", round(LS_comb[10],4)), vjust = 2, size = 3) +
annotate("text", x = weight[10], y = LS_comb[10],
label = paste0("Weight: ", round(weight[10],4)), vjust = 4, size = 3) +
geom_point(aes(x = weight[10], y = LS_comb[10]), size = 3, color = "orange")
weight
weight
weight_train
LS_comb
LS_comb_train
