for (j in 1:length(w)) {
for (i in 1:R) {
pool_train[j] <-  sum(w[j]*fit_1_train[i] + (1-w[j])*fit_2_train[i] - train[i,3]) / R
}}
pool_train
comb <- cbind(w, pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
fit_1_train
fit_2_train
train
pool_train
sum(w[2]*fit_1_train[1] + (1-w[2])*fit_2_train[1] - train[1,3])
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
for (i in 1:R) {
sum[j] <-  sum(w[j]*fit_1_train[i] + (1-w[j])*fit_2_train[i] - train[i,3])
}
pool_train[j] <-  sum[j] / R
}
w <- seq(from = 0, to = 1, by = 0.01)
# In-sample
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
sum[j] <-  sum(w[j]*fit_1_train + (1-w[j])*fit_2_train - train[,3]) / R
}
w[5]*fit_1_train + (1-w[5])*fit_2_train
fit_1_train
train[,3]
train[,3] |> as.numeric()
as.numeric(train[,3])
train$Log
w <- seq(from = 0, to = 1, by = 0.01)
# In-sample
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
sum[j] <-  sum(w[j]*fit_1_train + (1-w[j])*fit_2_train - train$Log) / R
}
w[5]*fit_1_train + (1-w[5])*fit_2_train - train$Log
sum(w[5]*fit_1_train + (1-w[5])*fit_2_train - train$Log)
sum(w[5]*fit_1_train + (1-w[5])*fit_2_train - train$Log) / R
w <- seq(from = 0, to = 1, by = 0.01)
# In-sample
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(w[j]*fit_1_train + (1-w[j])*fit_2_train - train$Log) / R
}
pool_train
comb <- cbind(w, pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
w <- seq(from = 0, to = 1, by = 0.01)
# In-sample
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(w[j]*fit_1_train + (1-w[j])*fit_2_train - train$Log)^2 / R
}
comb <- cbind(w, pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
pool_train
pool <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(w[j]*fit_1_test + (1-w[j])*fit_2_test - train$Log)^2 / R
}
pool <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(w[j]*fit_1_test + (1-w[j])*fit_2_test - train$Log)^2 / P
}
pool <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(w[j]*fit_1_test + (1-w[j])*fit_2_test - test$Log)^2 / P
}
pool
comb <- cbind(w, pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight_test <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb_test <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
LS_comb_2 <- comb |> filter(w == weight_optimal) |> select(pool) |> as.numeric()
w <- seq(from = 0, to = 1, by = 0.01)
# In-sample
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(w[j]*fit_1_train + (1-w[j])*fit_2_train - train$Log)^2 / R
}
comb <- cbind(w, pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
p1 <- comb |> ggplot(aes(w, pool_train)) +
geom_line(color = "red") +
labs(title = "ARMA(1,1) and Linear Regression",
x = "Weight on model ARMA(1,1)",
y = "Log socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight_optimal, y = LS_comb_optimal,
label = paste0("Max: ", round(LS_comb_optimal,4)), vjust = 2, size = 3) +
annotate("text", x = weight_optimal, y = LS_comb_optimal,
label = paste0("Weight: ", round(weight_optimal,4)), vjust = 4, size = 3) +
geom_point(aes(x = weight_optimal, y = LS_comb_optimal), size = 3, color = "orange")
# Out-of-sample
pool <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(w[j]*fit_1_test + (1-w[j])*fit_2_test - test$Log)^2 / P
}
comb <- cbind(w, pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight_test <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb_test <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
LS_comb_2 <- comb |> filter(w == weight_optimal) |> select(pool) |> as.numeric()
p2 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "ARMA(1,1) and Linear Regression",
x = "Weight on model ARMA(1,1)",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight_test, y = LS_comb_test,
label = paste0("Max: ", round(LS_comb_test,4)), vjust = 3, size = 3) +
annotate("text", x = weight_test, y = LS_comb_test,
label = paste0("Weight: ", round(weight_test,4)), vjust = 5, size = 3) +
geom_point(aes(x = weight_test, y = LS_comb_test), size = 3, color = "blue") +
geom_point(aes(x = weight_optimal, y = LS_comb_2), size = 2, color = "orange") +
annotate("text", x = weight_optimal, y = LS_comb_2,
label = paste0("Optimal Weight: ", round(weight_optimal,4)), hjust = 1.1, size = 3)
library(gridExtra)
grid.arrange(p1,p2)
w <- seq(from = 0, to = 1, by = 0.01)
# In-sample
pool_train <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool_train[j] <-  sum(w[j]*fit_1_train + (1-w[j])*fit_2_train - train$Log)^2 / R
}
comb <- cbind(w, pool_train) |> as_tibble()
comb |> filter(pool_train == max(comb$pool_train))
weight_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(w) |> as.numeric()
LS_comb_optimal <- comb |> filter(pool_train == max(comb$pool_train)) |> select(pool_train) |> as.numeric()
p1 <- comb |> ggplot(aes(w, pool_train)) +
geom_line(color = "red") +
labs(title = "SARIMA and ETS(A,A,A)",
x = "Weight on model SARIMA",
y = "Log socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight_optimal, y = LS_comb_optimal,
label = paste0("Max: ", round(LS_comb_optimal,4)), vjust = 2, size = 3) +
annotate("text", x = weight_optimal, y = LS_comb_optimal,
label = paste0("Weight: ", round(weight_optimal,4)), vjust = 4, size = 3) +
geom_point(aes(x = weight_optimal, y = LS_comb_optimal), size = 3, color = "orange")
# Out-of-sample
pool <- numeric(length(w)) |> as.numeric()
for (j in 1:length(w)) {
pool[j] <-  sum(w[j]*fit_1_test + (1-w[j])*fit_2_test - test$Log)^2 / P
}
comb <- cbind(w, pool) |> as_tibble()
comb |> filter(pool == max(comb$pool))
weight_test <- comb |> filter(pool == max(comb$pool)) |> select(w) |> as.numeric()
LS_comb_test <- comb |> filter(pool == max(comb$pool)) |> select(pool) |> as.numeric()
LS_comb_2 <- comb |> filter(w == weight_optimal) |> select(pool) |> as.numeric()
p2 <- comb |> ggplot(aes(w, pool)) +
geom_line(color = "red") +
labs(title = "SARIMA and ETS(A,A,A)",
x = "Weight on model SARIMA",
y = "Log predictive socre") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5),
title = element_text(size = 9),
axis.text = element_text(size = 6)) +
annotate("text", x = weight_test, y = LS_comb_test,
label = paste0("Max: ", round(LS_comb_test,4)), vjust = 3, size = 3) +
annotate("text", x = weight_test, y = LS_comb_test,
label = paste0("Weight: ", round(weight_test,4)), vjust = 5, size = 3) +
geom_point(aes(x = weight_test, y = LS_comb_test), size = 3, color = "blue") +
geom_point(aes(x = weight_optimal, y = LS_comb_2), size = 2, color = "orange") +
annotate("text", x = weight_optimal, y = LS_comb_2,
label = paste0("Optimal Weight: ", round(weight_optimal,4)), hjust = 1.1, size = 3)
grid.arrange(p1,p2)
library(readxl)
library(fpp3)
library(tidyverse)
library(dplyr)
# https://www.abs.gov.au/statistics/labour/EMPL-and-unEMPL/labour-force-australia-detailed/latest-release
Quarter <- read_xlsx("6291004.xlsx", range = "Data1!A11:A164", col_names = "Quarter")
Total <- read_xlsx("6291004.xlsx", range = "Data1!BI11:BI164", col_names = "Total")
EMPL <- cbind(Quarter, Total)
# 1978 Feb - 2023 Feb
EMPL <- EMPL |>
mutate(Quarter = yearquarter(Quarter)) |>
as_tsibble(index = "Quarter")
EMPL <- EMPL |> mutate(Log = log(Total),
Log_diff = difference(log(Total),4))
T <- nrow(EMPL)
# In-sample - Training Set
train <- EMPL[1:floor(nrow(EMPL)*.6),] |> as_tsibble()
R <- nrow(train)
# Out-of-sample - Test set
test <- EMPL[(R+1):nrow(EMPL),] |> as_tsibble()
P <- nrow(test)
m <- 4
# Preliminary Analysis
# train |> autoplot(Total)
# train |> autoplot(log(Total))
# train |> features(Total, features = guerrero)
# train |> gg_season(Total)
# train |> gg_subseries(Total)
# train |> autoplot(difference(log(Total),m))
# train |> gg_tsdisplay(difference(log(Total),m), "partial")
# train |> gg_tsdisplay(difference(difference(log(Total),m),1), "partial")
# Model: ARIMA(2,0,2)(0,1,1)[4] w/ drift
fit_1 <- train |> model(ARIMA(Log))
report(fit_1)
# Coefficients:
#    ar1      ar2      ma1     ma2     sma1  constant
# 1.7753  -0.8137  -0.7612  0.2615  -0.8917     7e-04
# sigma^2 estimated as 3.881e-05
fit_1_coef <- coef(fit_1) |> select(term, estimate)
resid_1_train <- residuals(fit_1) |> as_tibble() |> select(.resid)
resid_1_train
residuals(fit_1)
mean_1_train <- numeric(R) |> as.numeric()
mean_1_train[1] <- fit_1_coef[6,2]
View(resid_1_train)
View(mean_1_train)
mean_1_train <- numeric(R)
mean_1_train[1] <- fit_1_coef[6,2]
mean_1_train <- numeric(R)
mean_1_train[1] <- fit_1_coef[6,2]
View(mean_1_train)
mean_1_train[1]
View(train)
train[1,3]
mean_1_train[2] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[1,3]
mean_1_train[2]
mean_1_train[1]
for (j in 1:R) {
mean_1_train[j] <- fit_1_coef[6,2] + train[j-4,3] + fit_1_coef[1,2]*train[j-1,3] + fit_1_coef[2,2]*train[j-2,3] - fit_1_coef[1,2]*train[j-5,3] - fit_1_coef[2,2]*train[j-6,3]
}
train[3-4,3]
train[-3,3]
resid_1_train <- residuals(fit_1) |> as_tibble() |> select(.resid)
mean_1_train <- numeric(R)
mean_1_train[1] <- fit_1_coef[6,2]
mean_1_train[2] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[1,3]
mean_1_train[3] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[2,3] + fit_1_coef[2,2]*train[1,3]
mean_1_train[4] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[3,3] + fit_1_coef[2,2]*train[2,3]
mean_1_train[5] <- fit_1_coef[6,2] + train[1,3] + fit_1_coef[1,2]*train[4,3] + fit_1_coef[2,2]*train[3,3]
mean_1_train[6] <- fit_1_coef[6,2] + train[2,3] + fit_1_coef[1,2]*train[5,3] + fit_1_coef[2,2]*train[4,3] - fit_1_coef[1,2]*train[1,3]
mean_1_train[7] <- fit_1_coef[6,2] + train[3,3] + fit_1_coef[1,2]*train[6,3] + fit_1_coef[2,2]*train[5,3] - fit_1_coef[1,2]*train[2,3] - fit_1_coef[2,2]*train[1,3]
View(mean_1_train)
resid_1_train[1]
resid_1_train[[1]]
resid_1_train
resid_1_train[1,1]
resid_1_train[2,1]
resid_1_train <- residuals(fit_1) |> as_tibble() |> select(.resid)
mean_1_train <- numeric(R)
mean_1_train[1] <- fit_1_coef[6,2]
mean_1_train[2] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[1,1]
mean_1_train[3] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[2,3] + fit_1_coef[2,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[2,1] + fit_1_coef[4,2]*resid_1_train[1,1]
mean_1_train[4] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[3,3] + fit_1_coef[2,2]*train[2,3] + fit_1_coef[3,2]*resid_1_train[3,1] + fit_1_coef[4,2]*resid_1_train[2,1]
mean_1_train[5] <- fit_1_coef[6,2] + train[1,3] + fit_1_coef[1,2]*train[4,3] + fit_1_coef[2,2]*train[3,3] + fit_1_coef[3,2]*resid_1_train[4,1] + fit_1_coef[4,2]*resid_1_train[3,1] + fit_1_coef[5,2]*resid_1_train[1,1]
mean_1_train[6] <- fit_1_coef[6,2] + train[2,3] + fit_1_coef[1,2]*train[5,3] + fit_1_coef[2,2]*train[4,3] - fit_1_coef[1,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[5,1] + fit_1_coef[4,2]*resid_1_train[4,1] + fit_1_coef[5,2]*resid_1_train[2,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[1,1]
mean_1_train[7] <- fit_1_coef[6,2] + train[3,3] + fit_1_coef[1,2]*train[6,3] + fit_1_coef[2,2]*train[5,3] - fit_1_coef[1,2]*train[2,3] - fit_1_coef[2,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[6,1] + fit_1_coef[4,2]*resid_1_train[5,1] + fit_1_coef[5,2]*resid_1_train[3,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[2,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[1,1]
fit_1_train <- fitted(fit_1)$.fitted
fit_1_train
for (j in 8:R) {
mean_1_train[j] <- fit_1_coef[6,2] + train[j-4,3] + fit_1_coef[1,2]*train[j-1,3] + fit_1_coef[2,2]*train[j-2,3] - fit_1_coef[1,2]*train[j-5,3] - fit_1_coef[2,2]*train[j-6,3] + fit_1_coef[3,2]*resid_1_train[j-1,1] + fit_1_coef[4,2]*resid_1_train[j-2,1] + fit_1_coef[5,2]*resid_1_train[j-4,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[j-5,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[j-6,1]
}
fit_1_train
fit_1_train
library(readxl)
library(fpp3)
library(tidyverse)
library(dplyr)
# https://www.abs.gov.au/statistics/labour/EMPL-and-unEMPL/labour-force-australia-detailed/latest-release
Quarter <- read_xlsx("6291004.xlsx", range = "Data1!A11:A164", col_names = "Quarter")
Total <- read_xlsx("6291004.xlsx", range = "Data1!BI11:BI164", col_names = "Total")
EMPL <- cbind(Quarter, Total)
# 1978 Feb - 2023 Feb
EMPL <- EMPL |>
mutate(Quarter = yearquarter(Quarter)) |>
as_tsibble(index = "Quarter")
EMPL <- EMPL |> mutate(Log = log(Total),
Log_diff = difference(log(Total),4))
T <- nrow(EMPL)
# In-sample - Training Set
train <- EMPL[1:floor(nrow(EMPL)*.6),] |> as_tsibble()
R <- nrow(train)
# Out-of-sample - Test set
test <- EMPL[(R+1):nrow(EMPL),] |> as_tsibble()
P <- nrow(test)
m <- 4
# Preliminary Analysis
# train |> autoplot(Total)
# train |> autoplot(log(Total))
# train |> features(Total, features = guerrero)
# train |> gg_season(Total)
# train |> gg_subseries(Total)
# train |> autoplot(difference(log(Total),m))
# train |> gg_tsdisplay(difference(log(Total),m), "partial")
# train |> gg_tsdisplay(difference(difference(log(Total),m),1), "partial")
# Model: ARIMA(2,0,2)(0,1,1)[4] w/ drift
fit_1 <- train |> model(ARIMA(Log))
report(fit_1)
# Coefficients:
#    ar1      ar2      ma1     ma2     sma1  constant
# 1.7753  -0.8137  -0.7612  0.2615  -0.8917     7e-04
# sigma^2 estimated as 3.881e-05
fit_1_coef <- coef(fit_1) |> select(term, estimate)
# fit_1_coef[1,2] ar1 (phi_1)
# fit_1_coef[2,2] ar2 (phi_2)
# fit_1_coef[3,2] ma1 (theta_1)
# fit_1_coef[4,2] ma2 (theta_2)
# fit_1_coef[5,2] sma1 (Theta_1)
# fit_1_coef[6,2] constant
# (1 - φ₁B - φ₂B²)(1 - B⁴)yₜ = c + (1 + θ₁B + θ₂B²)(1 + Θ₁B⁴)eₜ
yt = fit_1_coef[6,2] + (yt-4) + fit_1_coef[1,2]*(yt-1) + fit_1_coef[2,2]*(yt-2) - fit_1_coef[1,2]*(yt-5) - fit_1_coef[2,2]*(yt-6)
resid_1_train <- residuals(fit_1) |> as_tibble() |> select(.resid)
mean_1_train <- numeric(R)
mean_1_train[1] <- fit_1_coef[6,2]
mean_1_train[2] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[1,1]
mean_1_train[3] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[2,3] + fit_1_coef[2,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[2,1] + fit_1_coef[4,2]*resid_1_train[1,1]
mean_1_train[4] <- fit_1_coef[6,2] + fit_1_coef[1,2]*train[3,3] + fit_1_coef[2,2]*train[2,3] + fit_1_coef[3,2]*resid_1_train[3,1] + fit_1_coef[4,2]*resid_1_train[2,1]
mean_1_train[5] <- fit_1_coef[6,2] + train[1,3] + fit_1_coef[1,2]*train[4,3] + fit_1_coef[2,2]*train[3,3] + fit_1_coef[3,2]*resid_1_train[4,1] + fit_1_coef[4,2]*resid_1_train[3,1] + fit_1_coef[5,2]*resid_1_train[1,1]
mean_1_train[6] <- fit_1_coef[6,2] + train[2,3] + fit_1_coef[1,2]*train[5,3] + fit_1_coef[2,2]*train[4,3] - fit_1_coef[1,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[5,1] + fit_1_coef[4,2]*resid_1_train[4,1] + fit_1_coef[5,2]*resid_1_train[2,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[1,1]
mean_1_train[7] <- fit_1_coef[6,2] + train[3,3] + fit_1_coef[1,2]*train[6,3] + fit_1_coef[2,2]*train[5,3] - fit_1_coef[1,2]*train[2,3] - fit_1_coef[2,2]*train[1,3] + fit_1_coef[3,2]*resid_1_train[6,1] + fit_1_coef[4,2]*resid_1_train[5,1] + fit_1_coef[5,2]*resid_1_train[3,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[2,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[1,1]
for (j in 8:R) {
mean_1_train[j] <- fit_1_coef[6,2] + train[j-4,3] + fit_1_coef[1,2]*train[j-1,3] + fit_1_coef[2,2]*train[j-2,3] - fit_1_coef[1,2]*train[j-5,3] - fit_1_coef[2,2]*train[j-6,3] + fit_1_coef[3,2]*resid_1_train[j-1,1] + fit_1_coef[4,2]*resid_1_train[j-2,1] + fit_1_coef[5,2]*resid_1_train[j-4,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[j-5,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[j-6,1]
}
resid_1 <- numeric(P) |> as.numeric()
resid_1[1] <- test[1,3] - (fit_1_coef[6,2] + train[R-3,3] + fit_1_coef[1,2]*train[R,3] + fit_1_coef[2,2]*train[R-1,3] - fit_1_coef[1,2]*train[R-4,3] - fit_1_coef[2,2]*train[R-5,3] + fit_1_coef[3,2]*resid_1_train[R,1] + fit_1_coef[4,2]*resid_1_train[R-1,1] + fit_1_coef[5,2]*resid_1_train[R-3,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-4,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-5,1])
resid_1[2] <- test[2,3] - (fit_1_coef[6,2] + train[R-2,3] + fit_1_coef[1,2]*test[1,3] + fit_1_coef[2,2]*train[R,3] - fit_1_coef[1,2]*train[R-3,3] - fit_1_coef[2,2]*train[R-4,3] + fit_1_coef[3,2]*resid_1[1] + fit_1_coef[4,2]*resid_1_train[R,1] + fit_1_coef[5,2]*resid_1_train[R-2,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-3,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-4,1])
resid_1[3] <- test[3,3] - (fit_1_coef[6,2] + train[R-1,3] + fit_1_coef[1,2]*test[2,3] + fit_1_coef[2,2]*test[1,3] - fit_1_coef[1,2]*train[R-2,3] - fit_1_coef[2,2]*train[R-3,3] + fit_1_coef[3,2]*resid_1[2] + fit_1_coef[4,2]*resid_1[1] + fit_1_coef[5,2]*resid_1_train[R-1,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-2,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-3,1])
resid_1[4] <- test[4,3] - (fit_1_coef[6,2] + train[R,3] + fit_1_coef[1,2]*test[3,3] + fit_1_coef[2,2]*test[2,3] - fit_1_coef[1,2]*train[R-1,3] - fit_1_coef[2,2]*train[R-2,3] + fit_1_coef[3,2]*resid_1[3] + fit_1_coef[4,2]*resid_1[2] + fit_1_coef[5,2]*resid_1_train[R,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-1,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-2,1])
resid_1[5] <- test[4,3] - (fit_1_coef[6,2] + test[1,3] + fit_1_coef[1,2]*test[4,3] + fit_1_coef[2,2]*test[3,3] - fit_1_coef[1,2]*train[R,3] - fit_1_coef[2,2]*train[R-1,3] + fit_1_coef[3,2]*resid_1[4] + fit_1_coef[4,2]*resid_1[3] + fit_1_coef[5,2]*resid_1[1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-1,1])
resid_1[6] <- test[4,3] - (fit_1_coef[6,2] + test[2,3] + fit_1_coef[1,2]*test[5,3] + fit_1_coef[2,2]*test[4,3] - fit_1_coef[1,2]*test[1,3] - fit_1_coef[2,2]*train[R,3] + fit_1_coef[3,2]*resid_1[5] + fit_1_coef[4,2]*resid_1[4] + fit_1_coef[5,2]*resid_1[2] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1[1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R,1])
View(resid_1)
View(resid_1_train)
resid_1 <- numeric(P) |> as.numeric()
resid_1[1] <- test[1,3] - (fit_1_coef[6,2] + train[R-3,3] + fit_1_coef[1,2]*train[R,3] + fit_1_coef[2,2]*train[R-1,3] - fit_1_coef[1,2]*train[R-4,3] - fit_1_coef[2,2]*train[R-5,3] + fit_1_coef[3,2]*resid_1_train[R,1] + fit_1_coef[4,2]*resid_1_train[R-1,1] + fit_1_coef[5,2]*resid_1_train[R-3,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-4,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-5,1])
resid_1[2] <- test[2,3] - (fit_1_coef[6,2] + train[R-2,3] + fit_1_coef[1,2]*test[1,3] + fit_1_coef[2,2]*train[R,3] - fit_1_coef[1,2]*train[R-3,3] - fit_1_coef[2,2]*train[R-4,3] + fit_1_coef[3,2]*resid_1[1] + fit_1_coef[4,2]*resid_1_train[R,1] + fit_1_coef[5,2]*resid_1_train[R-2,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-3,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-4,1])
resid_1[3] <- test[3,3] - (fit_1_coef[6,2] + train[R-1,3] + fit_1_coef[1,2]*test[2,3] + fit_1_coef[2,2]*test[1,3] - fit_1_coef[1,2]*train[R-2,3] - fit_1_coef[2,2]*train[R-3,3] + fit_1_coef[3,2]*resid_1[2] + fit_1_coef[4,2]*resid_1[1] + fit_1_coef[5,2]*resid_1_train[R-1,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-2,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-3,1])
resid_1[4] <- test[4,3] - (fit_1_coef[6,2] + train[R,3] + fit_1_coef[1,2]*test[3,3] + fit_1_coef[2,2]*test[2,3] - fit_1_coef[1,2]*train[R-1,3] - fit_1_coef[2,2]*train[R-2,3] + fit_1_coef[3,2]*resid_1[3] + fit_1_coef[4,2]*resid_1[2] + fit_1_coef[5,2]*resid_1_train[R,1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R-1,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-2,1])
resid_1[5] <- test[5,3] - (fit_1_coef[6,2] + test[1,3] + fit_1_coef[1,2]*test[4,3] + fit_1_coef[2,2]*test[3,3] - fit_1_coef[1,2]*train[R,3] - fit_1_coef[2,2]*train[R-1,3] + fit_1_coef[3,2]*resid_1[4] + fit_1_coef[4,2]*resid_1[3] + fit_1_coef[5,2]*resid_1[1] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1_train[R,1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R-1,1])
resid_1[6] <- test[6,3] - (fit_1_coef[6,2] + test[2,3] + fit_1_coef[1,2]*test[5,3] + fit_1_coef[2,2]*test[4,3] - fit_1_coef[1,2]*test[1,3] - fit_1_coef[2,2]*train[R,3] + fit_1_coef[3,2]*resid_1[5] + fit_1_coef[4,2]*resid_1[4] + fit_1_coef[5,2]*resid_1[2] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1[1] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1_train[R,1])
for (j in 7:P) {
resid_1[j] <- test[j,3] - (fit_1_coef[6,2] + test[j-4,3] + fit_1_coef[1,2]*test[j-1,3] + fit_1_coef[2,2]*test[j-2,3] - fit_1_coef[1,2]*test[j-5,3] - fit_1_coef[2,2]*test[j-6,3] + fit_1_coef[3,2]*resid_1[j-1] + fit_1_coef[4,2]*resid_1[j-2] + fit_1_coef[5,2]*resid_1[j-4] + fit_1_coef[3,2]*fit_1_coef[5,2]*resid_1[j-5] + fit_1_coef[4,2]*fit_1_coef[5,2]*resid_1[j-6])
}
# Model: ETS(A,A,A)
fit_2 <- train |> model(ETS(Log))
fit_2_coef <- coef(fit_2) |> select(term, estimate)
fit_2_coef
fit_2_coef[9,2]
resid_2_train <- residuals(fit_2) |> as_tibble() |> select(.resid)
View(resid_2_train)
fit_2_coef <- coef(fit_2) |> select(term, estimate)
resid_2_train <- residuals(fit_2) |> as_tibble() |> select(.resid)
l <- numeric(T+1) |> as.numeric()
b <- numeric(T+1) |> as.numeric()
s <- numeric(T+4) |> as.numeric()
# initial values
l[1] <- fit_2_coef[4,2]
b[1] <- fit_2_coef[5,2]
s[1] <- fit_2_coef[9,2] #-3
s[2] <- fit_2_coef[8,2] #-2
s[3] <- fit_2_coef[7,2] #-1
s[4] <- fit_2_coef[6,2] #0
# (1) - (R)
for (j in 2:(R+1)) {
l[j] <- l[j-1] + b[j-1] + fit_2_coef[1,2]*resid_2_train[1,1]
}
fit_2_coef
for (j in 2:(R+1)) {
l[j] <- l[j-1] + b[j-1] + fit_2_coef[1,2]*resid_2_train[1,1]
b[j] <- b[j-1] + fit_2_coef[2,2]*resid_2_train[1,1]
}
l[1]
b[1]
l <- numeric(T+1)
l[1] <- fit_2_coef[4,2]
l[1]
b <- numeric(T+1)
b[1] <- fit_2_coef[5,2]
for (j in 2:(R+1)) {
l[j] <- l[j-1] + b[j-1] + fit_2_coef[1,2]*resid_2_train[1,1]
b[j] <- b[j-1] + fit_2_coef[2,2]*resid_2_train[1,1]
}
fit_2_coef <- coef(fit_2) |> select(term, estimate)
resid_2_train <- residuals(fit_2) |> as_tibble() |> select(.resid)
l <- numeric(T+1) |> as.numeric()
b <- numeric(T+1) |> as.numeric()
s <- numeric(T+4) |> as.numeric()
# initial values
l[1] <- fit_2_coef[4,2]
b[1] <- fit_2_coef[5,2]
s[1] <- fit_2_coef[9,2] #-3
s[2] <- fit_2_coef[8,2] #-2
s[3] <- fit_2_coef[7,2] #-1
s[4] <- fit_2_coef[6,2] #0
# (1) - (R)
for (j in 2:(R+1)) {
l[j] <- l[[j-1]] + b[[j-1]] + fit_2_coef[1,2]*resid_2_train[1,1]
b[j] <- b[[j-1]] + fit_2_coef[2,2]*resid_2_train[1,1]
}
View(l)
View(b)
fit_2_coef
l <- numeric(T+1) |> as.numeric()
b <- numeric(T+1) |> as.numeric()
s <- numeric(T+4) |> as.numeric()
# initial values
l[1] <- fit_2_coef[4,2]
b[1] <- fit_2_coef[5,2]
s[1] <- fit_2_coef[9,2] #-3
s[2] <- fit_2_coef[8,2] #-2
s[3] <- fit_2_coef[7,2] #-1
s[4] <- fit_2_coef[6,2] #0
# (1) - (R)
for (j in 2:(R+1)) {
l[j] <- l[[j-1]] + b[[j-1]] + fit_2_coef[1,2]*resid_2_train[j,1]
b[j] <- b[[j-1]] + fit_2_coef[2,2]*resid_2_train[j,1]
}
for (j in 5:(R+4)) {
s[j] <- s[[j-4]] + fit_2_coef[3,2]*resid_2_train[j,1]
}
View(l)
View(s)
View(b)
fit_2_coef <- coef(fit_2) |> select(term, estimate)
resid_2_train <- residuals(fit_2) |> as_tibble() |> select(.resid)
l <- numeric(T+1) |> as.numeric()
b <- numeric(T+1) |> as.numeric()
s <- numeric(T+4) |> as.numeric()
# initial values
l[1] <- fit_2_coef[4,2]
b[1] <- fit_2_coef[5,2]
s[1] <- fit_2_coef[9,2] #-3
s[2] <- fit_2_coef[8,2] #-2
s[3] <- fit_2_coef[7,2] #-1
s[4] <- fit_2_coef[6,2] #0
# (1) - (R)
for (j in 2:(R+1)) {
l[j] <- l[[j-1]] + b[[j-1]] + fit_2_coef[1,2]*resid_2_train[j-1,1]
b[j] <- b[[j-1]] + fit_2_coef[2,2]*resid_2_train[j-1,1]
}
for (j in 5:(R+4)) {
s[j] <- s[[j-4]] + fit_2_coef[3,2]*resid_2_train[j-4,1]
}
View(l)
View(b)
View(s)
mean_1_train <- numeric(R)
for (j in 1:R) {
mean_1_train[j] <- l[j] + b[j] + s[j]
}
mean_1_train <- numeric(R)
for (j in 1:R) {
mean_1_train[j] <- l[[j]] + b[[j]] + s[[j]]
}
mean_2_train <- numeric(R)
for (j in 1:R) {
mean_2_train[j] <- l[[j]] + b[[j]] + s[[j]]
}
mean_2_train
fit_2_train <- fitted(fit_2)$.fitted
mean_2_train
fit_2_train
View(l)
R+1
View(s)
View(b)
R+4
97-R-1
mean_2_train <- numeric(R)
for (j in 1:R) {
mean_2_train[j] <- l[[j]] + b[[j]] + s[[j]]
}
resid_2 <- numeric(P) |> as.numeric()
for (j in 1:P) {
resid_2[j] <- test[j,3] - (l[[R+j]] + b[[R+j]] + s[[R+j]])
l[R+j+1] <- l[[R+j]] + b[[R+j]] + fit_2_coef[1,2]*resid_2[j,1]
b[R+j+1] <- b[[R+j]] + fit_2_coef[2,2]*resid_2[j,1]
s[R+j+4] <- s[[R+j]] + fit_2_coef[3,2]*resid_2[j-4,1]
}
resid_2 <- numeric(P) |> as.numeric()
for (j in 1:P) {
resid_2[j] <- test[j,3] - (l[[R+j]] + b[[R+j]] + s[[R+j]])
l[R+j+1] <- l[[R+j]] + b[[R+j]] + fit_2_coef[1,2]*resid_2[[j,1]]
b[R+j+1] <- b[[R+j]] + fit_2_coef[2,2]*resid_2[[j,1]]
s[R+j+4] <- s[[R+j]] + fit_2_coef[3,2]*resid_2[[j-4,1]]
}
resid_2 <- numeric(P) |> as.numeric()
for (j in 1:P) {
resid_2[j] <- test[j,3] - (l[[R+j]] + b[[R+j]] + s[[R+j]])
l[R+j+1] <- l[[R+j]] + b[[R+j]] + fit_2_coef[1,2]*resid_2[j]
b[R+j+1] <- b[[R+j]] + fit_2_coef[2,2]*resid_2[j]
s[R+j+4] <- s[[R+j]] + fit_2_coef[3,2]*resid_2[j-4]
}
for (j in 1:P) {
resid_2[j] <- test[j,3] - (l[[R+j]] + b[[R+j]] + s[[R+j]])
l[R+j+1] <- l[[R+j]] + b[[R+j]] + fit_2_coef[1,2]*resid_2[j]
b[R+j+1] <- b[[R+j]] + fit_2_coef[2,2]*resid_2[j]
s[R+j+4] <- s[[R+j]] + fit_2_coef[3,2]*resid_2[j]
}
